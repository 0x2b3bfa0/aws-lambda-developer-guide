AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that uses Amazon CloudWatch Logs, AWS X-Ray, and AWS CloudFormation custom resources.
Globals:
  Function:
    Runtime: nodejs12.x
    Handler: index.handler
    Tracing: Active
Resources:
  bucket:
    Type: AWS::S3::Bucket
  role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Path: /service-role/
  processor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: processor/.
      Description: Retrieve logs and trace for errors.
      Timeout: 40
      Role: !GetAtt role.Arn
      Environment:
        Variables:
          bucket: !Ref bucket
  randomerror:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: random-error/.
      Description: Generate errors.
      Timeout: 8
      Role: !GetAtt role.Arn
  primer:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        var aws = require('aws-sdk')
        var response = require('cfn-response')
        exports.handler = async function(event, context) {
          console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
          // For Delete requests, immediately send a SUCCESS response.
          if (event.RequestType == "Delete") {
            return await response.send(event, context, "SUCCESS")
          }
          var responseStatus = "FAILED"
          var responseData = {}
          var functionName = event.ResourceProperties.FunctionName
          var lambda = new aws.Lambda()
          try {
            let invokeResponse = await lambda.invoke({ FunctionName: functionName }).promise()
          } catch(err) {
            responseData = {Error: "Invoke call failed"}
            console.log(responseData.Error + ":\n", err)
            return await response.send(event, context, responseStatus, responseData)
          }
          responseStatus = "SUCCESS"
          return await response.send(event, context, responseStatus, responseData)
        }
      Description: Invoke a function to create a log stream.
      Role: !GetAtt role.Arn
      Timeout: 8
  primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt primer.Arn
      FunctionName: !Ref randomerror
  subscription:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: cloudwatchlogspermission
    Properties:
      LogGroupName: !Join [ "/", [ "/aws/lambda", !Ref randomerror ] ]
      FilterPattern: ERROR
      DestinationArn: !GetAtt processor.Arn
  cloudwatchlogspermission:
    Type: AWS::Lambda::Permission
    # Wait for randomerror to be invoked to ensure that the log stream exists.
    DependsOn: primerinvoke
    Properties:
      FunctionName: !GetAtt processor.Arn
      Action: lambda:InvokeFunction
      Principal: !Join [ ".", [ "logs", !Ref "AWS::Region", "amazonaws.com" ] ]
      SourceAccount: !Ref AWS::AccountId
